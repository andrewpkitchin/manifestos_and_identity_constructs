# PDF Text Extraction Tool

## Overview

This Python script extracts text content from PDF files using two different methods: PyMuPDF's built-in text extraction and Tesseract OCR. It's designed to process political manifestos and other PDF documents, outputting clean text files containing only the original document content.

## Features

- **Dual extraction methods**: Uses both PyMuPDF and Tesseract OCR for comprehensive text extraction
- **Batch processing**: Can process entire folders of PDF files automatically
- **Clean output**: Extracts only the original text content without metadata or formatting markers
- **Error handling**: Continues processing even if individual pages fail
- **Progress tracking**: Displays processing status for each file and page

## Methods

### PyMuPDF Extraction
- Fast and efficient for PDFs with embedded text
- Best for high-quality, digitally-created documents
- Maintains original text formatting and spacing

### Tesseract OCR Extraction
- Uses optical character recognition to extract text from images
- Essential for scanned documents or image-based PDFs
- Configurable DPI settings (default: 300 DPI)
- More resource-intensive but handles poor-quality documents

## Usage

### Configuration
Edit the paths in the `__main__` section:
```python
pdf_folder = "/path/to/your/pdf/files"
output_directory = "/path/to/output/text/files"
```

### Running the Script
```bash
python pdf_extractor.py
```

### Output Files
For each PDF file, two text files are created:
- `[filename]_pymupdf_extraction.txt` - PyMuPDF results
- `[filename]_tesseract_extraction.txt` - OCR results

## Requirements

- Python 3.x
- PyMuPDF (`pip install PyMuPDF`)
- Pillow (`pip install Pillow`)
- pytesseract (`pip install pytesseract`)
- Tesseract OCR binary installed on system

## File Structure

```
your_project/
├── pdf_extractor.py
├── input_pdfs/
│   ├── document1.pdf
│   └── document2.pdf
└── output_texts/
    ├── document1_pymupdf_extraction.txt
    ├── document1_tesseract_extraction.txt
    ├── document2_pymupdf_extraction.txt
    └── document2_tesseract_extraction.txt
```

## When to Use Each Method

**Use PyMuPDF results when:**
- PDF contains selectable text
- Document is high quality and digitally created
- Fast processing is needed

**Use OCR results when:**
- PDF is a scanned document
- Text appears as images
- PyMuPDF extraction returns poor results

## Notes

- Both extraction methods run automatically for comparison
- Processing time varies significantly between methods (PyMuPDF is much faster)
- OCR accuracy depends on image quality and DPI settings
- Large batch jobs may take considerable time, especially with OCR enabled